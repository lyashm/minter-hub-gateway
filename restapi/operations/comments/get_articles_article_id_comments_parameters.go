// Code generated by go-swagger; DO NOT EDIT.

package comments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetArticlesArticleIDCommentsParams creates a new GetArticlesArticleIDCommentsParams object
// with the default values initialized.
func NewGetArticlesArticleIDCommentsParams() GetArticlesArticleIDCommentsParams {

	var (
		// initialize parameters with default values

		limitDefault  = uint64(20)
		offsetDefault = uint64(0)
	)

	return GetArticlesArticleIDCommentsParams{
		Limit: limitDefault,

		Offset: offsetDefault,
	}
}

// GetArticlesArticleIDCommentsParams contains all the bound params for the get articles article ID comments operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetArticlesArticleIDComments
type GetArticlesArticleIDCommentsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: path
	*/
	ArticleID uint64
	/*The numbers of items to return (default is 20)
	  In: query
	  Default: 20
	*/
	Limit uint64
	/*The number of items to skip before starting to collect the result set (default is 0)
	  In: query
	  Default: 0
	*/
	Offset uint64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetArticlesArticleIDCommentsParams() beforehand.
func (o *GetArticlesArticleIDCommentsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rArticleID, rhkArticleID, _ := route.Params.GetOK("articleId")
	if err := o.bindArticleID(rArticleID, rhkArticleID, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindArticleID binds and validates parameter ArticleID from path.
func (o *GetArticlesArticleIDCommentsParams) bindArticleID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertUint64(raw)
	if err != nil {
		return errors.InvalidType("articleId", "path", "uint64", raw)
	}
	o.ArticleID = value

	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *GetArticlesArticleIDCommentsParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: true
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetArticlesArticleIDCommentsParams()
		return nil
	}

	value, err := swag.ConvertUint64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "uint64", raw)
	}
	o.Limit = value

	return nil
}

// bindOffset binds and validates parameter Offset from query.
func (o *GetArticlesArticleIDCommentsParams) bindOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: true
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetArticlesArticleIDCommentsParams()
		return nil
	}

	value, err := swag.ConvertUint64(raw)
	if err != nil {
		return errors.InvalidType("offset", "query", "uint64", raw)
	}
	o.Offset = value

	return nil
}
