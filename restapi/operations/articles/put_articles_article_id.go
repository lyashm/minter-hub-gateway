// Code generated by go-swagger; DO NOT EDIT.

package articles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PutArticlesArticleIDHandlerFunc turns a function with the right signature into a put articles article ID handler
type PutArticlesArticleIDHandlerFunc func(PutArticlesArticleIDParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PutArticlesArticleIDHandlerFunc) Handle(params PutArticlesArticleIDParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PutArticlesArticleIDHandler interface for that can handle valid put articles article ID params
type PutArticlesArticleIDHandler interface {
	Handle(PutArticlesArticleIDParams, interface{}) middleware.Responder
}

// NewPutArticlesArticleID creates a new http.Handler for the put articles article ID operation
func NewPutArticlesArticleID(ctx *middleware.Context, handler PutArticlesArticleIDHandler) *PutArticlesArticleID {
	return &PutArticlesArticleID{Context: ctx, Handler: handler}
}

/*PutArticlesArticleID swagger:route PUT /articles/{articleId} articles putArticlesArticleId

PutArticlesArticleID put articles article ID API

*/
type PutArticlesArticleID struct {
	Context *middleware.Context
	Handler PutArticlesArticleIDHandler
}

func (o *PutArticlesArticleID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutArticlesArticleIDParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
