// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"morg/restapi/operations/articles"
	"morg/restapi/operations/auth"
	"morg/restapi/operations/comments"
	"morg/restapi/operations/feeds"
	"morg/restapi/operations/me"
	"morg/restapi/operations/profile"
)

// NewMinterOrgHubAPI creates a new MinterOrgHub instance
func NewMinterOrgHubAPI(spec *loads.Document) *MinterOrgHubAPI {
	return &MinterOrgHubAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		CommentsDeleteCommentsCommentIDHandler: comments.DeleteCommentsCommentIDHandlerFunc(func(params comments.DeleteCommentsCommentIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation CommentsDeleteCommentsCommentID has not yet been implemented")
		}),
		FeedsDeleteFeedsFeedIDHandler: feeds.DeleteFeedsFeedIDHandlerFunc(func(params feeds.DeleteFeedsFeedIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FeedsDeleteFeedsFeedID has not yet been implemented")
		}),
		FeedsDeleteFeedsFeedIDFollowHandler: feeds.DeleteFeedsFeedIDFollowHandlerFunc(func(params feeds.DeleteFeedsFeedIDFollowParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FeedsDeleteFeedsFeedIDFollow has not yet been implemented")
		}),
		FeedsDeleteFeedsFeedIDJoinHandler: feeds.DeleteFeedsFeedIDJoinHandlerFunc(func(params feeds.DeleteFeedsFeedIDJoinParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FeedsDeleteFeedsFeedIDJoin has not yet been implemented")
		}),
		FeedsDeleteFeedsFeedIDJoinUserIDHandler: feeds.DeleteFeedsFeedIDJoinUserIDHandlerFunc(func(params feeds.DeleteFeedsFeedIDJoinUserIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FeedsDeleteFeedsFeedIDJoinUserID has not yet been implemented")
		}),
		ProfileDeleteProfilesUsernameStarHandler: profile.DeleteProfilesUsernameStarHandlerFunc(func(params profile.DeleteProfilesUsernameStarParams) middleware.Responder {
			return middleware.NotImplemented("operation ProfileDeleteProfilesUsernameStar has not yet been implemented")
		}),
		ArticlesGetArticlesHandler: articles.GetArticlesHandlerFunc(func(params articles.GetArticlesParams) middleware.Responder {
			return middleware.NotImplemented("operation ArticlesGetArticles has not yet been implemented")
		}),
		ArticlesGetArticlesArticleIDHandler: articles.GetArticlesArticleIDHandlerFunc(func(params articles.GetArticlesArticleIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ArticlesGetArticlesArticleID has not yet been implemented")
		}),
		CommentsGetArticlesArticleIDCommentsHandler: comments.GetArticlesArticleIDCommentsHandlerFunc(func(params comments.GetArticlesArticleIDCommentsParams) middleware.Responder {
			return middleware.NotImplemented("operation CommentsGetArticlesArticleIDComments has not yet been implemented")
		}),
		CommentsGetCommentsCommentIDCommentsHandler: comments.GetCommentsCommentIDCommentsHandlerFunc(func(params comments.GetCommentsCommentIDCommentsParams) middleware.Responder {
			return middleware.NotImplemented("operation CommentsGetCommentsCommentIDComments has not yet been implemented")
		}),
		FeedsGetFeedsHandler: feeds.GetFeedsHandlerFunc(func(params feeds.GetFeedsParams) middleware.Responder {
			return middleware.NotImplemented("operation FeedsGetFeeds has not yet been implemented")
		}),
		MeGetMeHandler: me.GetMeHandlerFunc(func(params me.GetMeParams) middleware.Responder {
			return middleware.NotImplemented("operation MeGetMe has not yet been implemented")
		}),
		MeGetMeNotificationsHandler: me.GetMeNotificationsHandlerFunc(func(params me.GetMeNotificationsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation MeGetMeNotifications has not yet been implemented")
		}),
		MeGetMeTagsHandler: me.GetMeTagsHandlerFunc(func(params me.GetMeTagsParams) middleware.Responder {
			return middleware.NotImplemented("operation MeGetMeTags has not yet been implemented")
		}),
		ProfileGetProfilesHandler: profile.GetProfilesHandlerFunc(func(params profile.GetProfilesParams) middleware.Responder {
			return middleware.NotImplemented("operation ProfileGetProfiles has not yet been implemented")
		}),
		ProfileGetProfilesUsernameHandler: profile.GetProfilesUsernameHandlerFunc(func(params profile.GetProfilesUsernameParams) middleware.Responder {
			return middleware.NotImplemented("operation ProfileGetProfilesUsername has not yet been implemented")
		}),
		ArticlesPostArticlesHandler: articles.PostArticlesHandlerFunc(func(params articles.PostArticlesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ArticlesPostArticles has not yet been implemented")
		}),
		ArticlesPostArticlesArticleIDVoteHandler: articles.PostArticlesArticleIDVoteHandlerFunc(func(params articles.PostArticlesArticleIDVoteParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ArticlesPostArticlesArticleIDVote has not yet been implemented")
		}),
		CommentsPostCommentsHandler: comments.PostCommentsHandlerFunc(func(params comments.PostCommentsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation CommentsPostComments has not yet been implemented")
		}),
		CommentsPostCommentsCommentIDVoteHandler: comments.PostCommentsCommentIDVoteHandlerFunc(func(params comments.PostCommentsCommentIDVoteParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation CommentsPostCommentsCommentIDVote has not yet been implemented")
		}),
		FeedsPostFeedsHandler: feeds.PostFeedsHandlerFunc(func(params feeds.PostFeedsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FeedsPostFeeds has not yet been implemented")
		}),
		FeedsPostFeedsFeedIDFollowHandler: feeds.PostFeedsFeedIDFollowHandlerFunc(func(params feeds.PostFeedsFeedIDFollowParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FeedsPostFeedsFeedIDFollow has not yet been implemented")
		}),
		FeedsPostFeedsFeedIDJoinHandler: feeds.PostFeedsFeedIDJoinHandlerFunc(func(params feeds.PostFeedsFeedIDJoinParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FeedsPostFeedsFeedIDJoin has not yet been implemented")
		}),
		FeedsPostFeedsFeedIDJoinUserIDHandler: feeds.PostFeedsFeedIDJoinUserIDHandlerFunc(func(params feeds.PostFeedsFeedIDJoinUserIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FeedsPostFeedsFeedIDJoinUserID has not yet been implemented")
		}),
		AuthPostLoginHandler: auth.PostLoginHandlerFunc(func(params auth.PostLoginParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthPostLogin has not yet been implemented")
		}),
		MePostMeNotificationsHandler: me.PostMeNotificationsHandlerFunc(func(params me.PostMeNotificationsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation MePostMeNotifications has not yet been implemented")
		}),
		ProfilePostProfilesUsernameStarHandler: profile.PostProfilesUsernameStarHandlerFunc(func(params profile.PostProfilesUsernameStarParams) middleware.Responder {
			return middleware.NotImplemented("operation ProfilePostProfilesUsernameStar has not yet been implemented")
		}),
		AuthPostRegistrationHandler: auth.PostRegistrationHandlerFunc(func(params auth.PostRegistrationParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthPostRegistration has not yet been implemented")
		}),
		ArticlesPutArticlesArticleIDHandler: articles.PutArticlesArticleIDHandlerFunc(func(params articles.PutArticlesArticleIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ArticlesPutArticlesArticleID has not yet been implemented")
		}),
		FeedsPutFeedsFeedIDHandler: feeds.PutFeedsFeedIDHandlerFunc(func(params feeds.PutFeedsFeedIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FeedsPutFeedsFeedID has not yet been implemented")
		}),
		MePutMeSettingsHandler: me.PutMeSettingsHandlerFunc(func(params me.PutMeSettingsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation MePutMeSettings has not yet been implemented")
		}),
		MePutMeSettingsNotificationsHandler: me.PutMeSettingsNotificationsHandlerFunc(func(params me.PutMeSettingsNotificationsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation MePutMeSettingsNotifications has not yet been implemented")
		}),
		MePutMeSettingsPasswordHandler: me.PutMeSettingsPasswordHandlerFunc(func(params me.PutMeSettingsPasswordParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation MePutMeSettingsPassword has not yet been implemented")
		}),

		// Applies when the "Authorization" header is set
		BearerAuthAuth: func(token string) (interface{}, error) {
			return nil, errors.NotImplemented("api key auth (bearerAuth) Authorization from header param [Authorization] has not yet been implemented")
		},

		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*MinterOrgHubAPI Description */
type MinterOrgHubAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// BearerAuthAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key Authorization provided in the header
	BearerAuthAuth func(string) (interface{}, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// CommentsDeleteCommentsCommentIDHandler sets the operation handler for the delete comments comment ID operation
	CommentsDeleteCommentsCommentIDHandler comments.DeleteCommentsCommentIDHandler
	// FeedsDeleteFeedsFeedIDHandler sets the operation handler for the delete feeds feed ID operation
	FeedsDeleteFeedsFeedIDHandler feeds.DeleteFeedsFeedIDHandler
	// FeedsDeleteFeedsFeedIDFollowHandler sets the operation handler for the delete feeds feed ID follow operation
	FeedsDeleteFeedsFeedIDFollowHandler feeds.DeleteFeedsFeedIDFollowHandler
	// FeedsDeleteFeedsFeedIDJoinHandler sets the operation handler for the delete feeds feed ID join operation
	FeedsDeleteFeedsFeedIDJoinHandler feeds.DeleteFeedsFeedIDJoinHandler
	// FeedsDeleteFeedsFeedIDJoinUserIDHandler sets the operation handler for the delete feeds feed ID join user ID operation
	FeedsDeleteFeedsFeedIDJoinUserIDHandler feeds.DeleteFeedsFeedIDJoinUserIDHandler
	// ProfileDeleteProfilesUsernameStarHandler sets the operation handler for the delete profiles username star operation
	ProfileDeleteProfilesUsernameStarHandler profile.DeleteProfilesUsernameStarHandler
	// ArticlesGetArticlesHandler sets the operation handler for the get articles operation
	ArticlesGetArticlesHandler articles.GetArticlesHandler
	// ArticlesGetArticlesArticleIDHandler sets the operation handler for the get articles article ID operation
	ArticlesGetArticlesArticleIDHandler articles.GetArticlesArticleIDHandler
	// CommentsGetArticlesArticleIDCommentsHandler sets the operation handler for the get articles article ID comments operation
	CommentsGetArticlesArticleIDCommentsHandler comments.GetArticlesArticleIDCommentsHandler
	// CommentsGetCommentsCommentIDCommentsHandler sets the operation handler for the get comments comment ID comments operation
	CommentsGetCommentsCommentIDCommentsHandler comments.GetCommentsCommentIDCommentsHandler
	// FeedsGetFeedsHandler sets the operation handler for the get feeds operation
	FeedsGetFeedsHandler feeds.GetFeedsHandler
	// MeGetMeHandler sets the operation handler for the get me operation
	MeGetMeHandler me.GetMeHandler
	// MeGetMeNotificationsHandler sets the operation handler for the get me notifications operation
	MeGetMeNotificationsHandler me.GetMeNotificationsHandler
	// MeGetMeTagsHandler sets the operation handler for the get me tags operation
	MeGetMeTagsHandler me.GetMeTagsHandler
	// ProfileGetProfilesHandler sets the operation handler for the get profiles operation
	ProfileGetProfilesHandler profile.GetProfilesHandler
	// ProfileGetProfilesUsernameHandler sets the operation handler for the get profiles username operation
	ProfileGetProfilesUsernameHandler profile.GetProfilesUsernameHandler
	// ArticlesPostArticlesHandler sets the operation handler for the post articles operation
	ArticlesPostArticlesHandler articles.PostArticlesHandler
	// ArticlesPostArticlesArticleIDVoteHandler sets the operation handler for the post articles article ID vote operation
	ArticlesPostArticlesArticleIDVoteHandler articles.PostArticlesArticleIDVoteHandler
	// CommentsPostCommentsHandler sets the operation handler for the post comments operation
	CommentsPostCommentsHandler comments.PostCommentsHandler
	// CommentsPostCommentsCommentIDVoteHandler sets the operation handler for the post comments comment ID vote operation
	CommentsPostCommentsCommentIDVoteHandler comments.PostCommentsCommentIDVoteHandler
	// FeedsPostFeedsHandler sets the operation handler for the post feeds operation
	FeedsPostFeedsHandler feeds.PostFeedsHandler
	// FeedsPostFeedsFeedIDFollowHandler sets the operation handler for the post feeds feed ID follow operation
	FeedsPostFeedsFeedIDFollowHandler feeds.PostFeedsFeedIDFollowHandler
	// FeedsPostFeedsFeedIDJoinHandler sets the operation handler for the post feeds feed ID join operation
	FeedsPostFeedsFeedIDJoinHandler feeds.PostFeedsFeedIDJoinHandler
	// FeedsPostFeedsFeedIDJoinUserIDHandler sets the operation handler for the post feeds feed ID join user ID operation
	FeedsPostFeedsFeedIDJoinUserIDHandler feeds.PostFeedsFeedIDJoinUserIDHandler
	// AuthPostLoginHandler sets the operation handler for the post login operation
	AuthPostLoginHandler auth.PostLoginHandler
	// MePostMeNotificationsHandler sets the operation handler for the post me notifications operation
	MePostMeNotificationsHandler me.PostMeNotificationsHandler
	// ProfilePostProfilesUsernameStarHandler sets the operation handler for the post profiles username star operation
	ProfilePostProfilesUsernameStarHandler profile.PostProfilesUsernameStarHandler
	// AuthPostRegistrationHandler sets the operation handler for the post registration operation
	AuthPostRegistrationHandler auth.PostRegistrationHandler
	// ArticlesPutArticlesArticleIDHandler sets the operation handler for the put articles article ID operation
	ArticlesPutArticlesArticleIDHandler articles.PutArticlesArticleIDHandler
	// FeedsPutFeedsFeedIDHandler sets the operation handler for the put feeds feed ID operation
	FeedsPutFeedsFeedIDHandler feeds.PutFeedsFeedIDHandler
	// MePutMeSettingsHandler sets the operation handler for the put me settings operation
	MePutMeSettingsHandler me.PutMeSettingsHandler
	// MePutMeSettingsNotificationsHandler sets the operation handler for the put me settings notifications operation
	MePutMeSettingsNotificationsHandler me.PutMeSettingsNotificationsHandler
	// MePutMeSettingsPasswordHandler sets the operation handler for the put me settings password operation
	MePutMeSettingsPasswordHandler me.PutMeSettingsPasswordHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *MinterOrgHubAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *MinterOrgHubAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *MinterOrgHubAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *MinterOrgHubAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *MinterOrgHubAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *MinterOrgHubAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *MinterOrgHubAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the MinterOrgHubAPI
func (o *MinterOrgHubAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.BearerAuthAuth == nil {
		unregistered = append(unregistered, "AuthorizationAuth")
	}

	if o.CommentsDeleteCommentsCommentIDHandler == nil {
		unregistered = append(unregistered, "comments.DeleteCommentsCommentIDHandler")
	}

	if o.FeedsDeleteFeedsFeedIDHandler == nil {
		unregistered = append(unregistered, "feeds.DeleteFeedsFeedIDHandler")
	}

	if o.FeedsDeleteFeedsFeedIDFollowHandler == nil {
		unregistered = append(unregistered, "feeds.DeleteFeedsFeedIDFollowHandler")
	}

	if o.FeedsDeleteFeedsFeedIDJoinHandler == nil {
		unregistered = append(unregistered, "feeds.DeleteFeedsFeedIDJoinHandler")
	}

	if o.FeedsDeleteFeedsFeedIDJoinUserIDHandler == nil {
		unregistered = append(unregistered, "feeds.DeleteFeedsFeedIDJoinUserIDHandler")
	}

	if o.ProfileDeleteProfilesUsernameStarHandler == nil {
		unregistered = append(unregistered, "profile.DeleteProfilesUsernameStarHandler")
	}

	if o.ArticlesGetArticlesHandler == nil {
		unregistered = append(unregistered, "articles.GetArticlesHandler")
	}

	if o.ArticlesGetArticlesArticleIDHandler == nil {
		unregistered = append(unregistered, "articles.GetArticlesArticleIDHandler")
	}

	if o.CommentsGetArticlesArticleIDCommentsHandler == nil {
		unregistered = append(unregistered, "comments.GetArticlesArticleIDCommentsHandler")
	}

	if o.CommentsGetCommentsCommentIDCommentsHandler == nil {
		unregistered = append(unregistered, "comments.GetCommentsCommentIDCommentsHandler")
	}

	if o.FeedsGetFeedsHandler == nil {
		unregistered = append(unregistered, "feeds.GetFeedsHandler")
	}

	if o.MeGetMeHandler == nil {
		unregistered = append(unregistered, "me.GetMeHandler")
	}

	if o.MeGetMeNotificationsHandler == nil {
		unregistered = append(unregistered, "me.GetMeNotificationsHandler")
	}

	if o.MeGetMeTagsHandler == nil {
		unregistered = append(unregistered, "me.GetMeTagsHandler")
	}

	if o.ProfileGetProfilesHandler == nil {
		unregistered = append(unregistered, "profile.GetProfilesHandler")
	}

	if o.ProfileGetProfilesUsernameHandler == nil {
		unregistered = append(unregistered, "profile.GetProfilesUsernameHandler")
	}

	if o.ArticlesPostArticlesHandler == nil {
		unregistered = append(unregistered, "articles.PostArticlesHandler")
	}

	if o.ArticlesPostArticlesArticleIDVoteHandler == nil {
		unregistered = append(unregistered, "articles.PostArticlesArticleIDVoteHandler")
	}

	if o.CommentsPostCommentsHandler == nil {
		unregistered = append(unregistered, "comments.PostCommentsHandler")
	}

	if o.CommentsPostCommentsCommentIDVoteHandler == nil {
		unregistered = append(unregistered, "comments.PostCommentsCommentIDVoteHandler")
	}

	if o.FeedsPostFeedsHandler == nil {
		unregistered = append(unregistered, "feeds.PostFeedsHandler")
	}

	if o.FeedsPostFeedsFeedIDFollowHandler == nil {
		unregistered = append(unregistered, "feeds.PostFeedsFeedIDFollowHandler")
	}

	if o.FeedsPostFeedsFeedIDJoinHandler == nil {
		unregistered = append(unregistered, "feeds.PostFeedsFeedIDJoinHandler")
	}

	if o.FeedsPostFeedsFeedIDJoinUserIDHandler == nil {
		unregistered = append(unregistered, "feeds.PostFeedsFeedIDJoinUserIDHandler")
	}

	if o.AuthPostLoginHandler == nil {
		unregistered = append(unregistered, "auth.PostLoginHandler")
	}

	if o.MePostMeNotificationsHandler == nil {
		unregistered = append(unregistered, "me.PostMeNotificationsHandler")
	}

	if o.ProfilePostProfilesUsernameStarHandler == nil {
		unregistered = append(unregistered, "profile.PostProfilesUsernameStarHandler")
	}

	if o.AuthPostRegistrationHandler == nil {
		unregistered = append(unregistered, "auth.PostRegistrationHandler")
	}

	if o.ArticlesPutArticlesArticleIDHandler == nil {
		unregistered = append(unregistered, "articles.PutArticlesArticleIDHandler")
	}

	if o.FeedsPutFeedsFeedIDHandler == nil {
		unregistered = append(unregistered, "feeds.PutFeedsFeedIDHandler")
	}

	if o.MePutMeSettingsHandler == nil {
		unregistered = append(unregistered, "me.PutMeSettingsHandler")
	}

	if o.MePutMeSettingsNotificationsHandler == nil {
		unregistered = append(unregistered, "me.PutMeSettingsNotificationsHandler")
	}

	if o.MePutMeSettingsPasswordHandler == nil {
		unregistered = append(unregistered, "me.PutMeSettingsPasswordHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *MinterOrgHubAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *MinterOrgHubAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {

		case "bearerAuth":

			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, o.BearerAuthAuth)

		}
	}
	return result

}

// Authorizer returns the registered authorizer
func (o *MinterOrgHubAPI) Authorizer() runtime.Authorizer {

	return o.APIAuthorizer

}

// ConsumersFor gets the consumers for the specified media types
func (o *MinterOrgHubAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *MinterOrgHubAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *MinterOrgHubAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the minter org hub API
func (o *MinterOrgHubAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *MinterOrgHubAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/comments/{commentId}"] = comments.NewDeleteCommentsCommentID(o.context, o.CommentsDeleteCommentsCommentIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/feeds/{feedId}"] = feeds.NewDeleteFeedsFeedID(o.context, o.FeedsDeleteFeedsFeedIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/feeds/{feedId}/follow"] = feeds.NewDeleteFeedsFeedIDFollow(o.context, o.FeedsDeleteFeedsFeedIDFollowHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/feeds/{feedId}/join"] = feeds.NewDeleteFeedsFeedIDJoin(o.context, o.FeedsDeleteFeedsFeedIDJoinHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/feeds/{feedId}/join/{userId}"] = feeds.NewDeleteFeedsFeedIDJoinUserID(o.context, o.FeedsDeleteFeedsFeedIDJoinUserIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/profiles/{username}/star"] = profile.NewDeleteProfilesUsernameStar(o.context, o.ProfileDeleteProfilesUsernameStarHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/articles"] = articles.NewGetArticles(o.context, o.ArticlesGetArticlesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/articles/{articleId}"] = articles.NewGetArticlesArticleID(o.context, o.ArticlesGetArticlesArticleIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/articles/{articleId}/comments"] = comments.NewGetArticlesArticleIDComments(o.context, o.CommentsGetArticlesArticleIDCommentsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/comments/{commentId}/comments"] = comments.NewGetCommentsCommentIDComments(o.context, o.CommentsGetCommentsCommentIDCommentsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/feeds"] = feeds.NewGetFeeds(o.context, o.FeedsGetFeedsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/me"] = me.NewGetMe(o.context, o.MeGetMeHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/me/notifications"] = me.NewGetMeNotifications(o.context, o.MeGetMeNotificationsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/me/tags"] = me.NewGetMeTags(o.context, o.MeGetMeTagsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/profiles"] = profile.NewGetProfiles(o.context, o.ProfileGetProfilesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/profiles/{username}"] = profile.NewGetProfilesUsername(o.context, o.ProfileGetProfilesUsernameHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/articles"] = articles.NewPostArticles(o.context, o.ArticlesPostArticlesHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/articles/{articleId}/vote"] = articles.NewPostArticlesArticleIDVote(o.context, o.ArticlesPostArticlesArticleIDVoteHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/comments"] = comments.NewPostComments(o.context, o.CommentsPostCommentsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/comments/{commentId}/vote"] = comments.NewPostCommentsCommentIDVote(o.context, o.CommentsPostCommentsCommentIDVoteHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/feeds"] = feeds.NewPostFeeds(o.context, o.FeedsPostFeedsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/feeds/{feedId}/follow"] = feeds.NewPostFeedsFeedIDFollow(o.context, o.FeedsPostFeedsFeedIDFollowHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/feeds/{feedId}/join"] = feeds.NewPostFeedsFeedIDJoin(o.context, o.FeedsPostFeedsFeedIDJoinHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/feeds/{feedId}/join/{userId}"] = feeds.NewPostFeedsFeedIDJoinUserID(o.context, o.FeedsPostFeedsFeedIDJoinUserIDHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/login"] = auth.NewPostLogin(o.context, o.AuthPostLoginHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/me/notifications"] = me.NewPostMeNotifications(o.context, o.MePostMeNotificationsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/profiles/{username}/star"] = profile.NewPostProfilesUsernameStar(o.context, o.ProfilePostProfilesUsernameStarHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/registration"] = auth.NewPostRegistration(o.context, o.AuthPostRegistrationHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/articles/{articleId}"] = articles.NewPutArticlesArticleID(o.context, o.ArticlesPutArticlesArticleIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/feeds/{feedId}"] = feeds.NewPutFeedsFeedID(o.context, o.FeedsPutFeedsFeedIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/me/settings"] = me.NewPutMeSettings(o.context, o.MePutMeSettingsHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/me/settings/notifications"] = me.NewPutMeSettingsNotifications(o.context, o.MePutMeSettingsNotificationsHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/me/settings/password"] = me.NewPutMeSettingsPassword(o.context, o.MePutMeSettingsPasswordHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *MinterOrgHubAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *MinterOrgHubAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *MinterOrgHubAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *MinterOrgHubAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
