// Code generated by go-swagger; DO NOT EDIT.

package me

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetMeNotificationsHandlerFunc turns a function with the right signature into a get me notifications handler
type GetMeNotificationsHandlerFunc func(GetMeNotificationsParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMeNotificationsHandlerFunc) Handle(params GetMeNotificationsParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetMeNotificationsHandler interface for that can handle valid get me notifications params
type GetMeNotificationsHandler interface {
	Handle(GetMeNotificationsParams, interface{}) middleware.Responder
}

// NewGetMeNotifications creates a new http.Handler for the get me notifications operation
func NewGetMeNotifications(ctx *middleware.Context, handler GetMeNotificationsHandler) *GetMeNotifications {
	return &GetMeNotifications{Context: ctx, Handler: handler}
}

/*GetMeNotifications swagger:route GET /me/notifications me getMeNotifications

GetMeNotifications get me notifications API

*/
type GetMeNotifications struct {
	Context *middleware.Context
	Handler GetMeNotificationsHandler
}

func (o *GetMeNotifications) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetMeNotificationsParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
