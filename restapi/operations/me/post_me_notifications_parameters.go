// Code generated by go-swagger; DO NOT EDIT.

package me

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostMeNotificationsParams creates a new PostMeNotificationsParams object
// no default values defined in spec.
func NewPostMeNotificationsParams() PostMeNotificationsParams {

	return PostMeNotificationsParams{}
}

// PostMeNotificationsParams contains all the bound params for the post me notifications operation
// typically these are obtained from a http.Request
//
// swagger:parameters PostMeNotifications
type PostMeNotificationsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Unique: true
	  In: query
	*/
	Type []uint64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostMeNotificationsParams() beforehand.
func (o *PostMeNotificationsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qType, qhkType, _ := qs.GetOK("type")
	if err := o.bindType(qType, qhkType, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindType binds and validates array parameter Type from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *PostMeNotificationsParams) bindType(rawData []string, hasKey bool, formats strfmt.Registry) error {

	var qvType string
	if len(rawData) > 0 {
		qvType = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	typeIC := swag.SplitByFormat(qvType, "")
	if len(typeIC) == 0 {
		return nil
	}

	var typeIR []uint64
	for i, typeIV := range typeIC {
		// items.Format: "uint64"
		typeI, err := swag.ConvertUint64(typeIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "type", i), "query", "uint64", typeI)
		}

		typeIR = append(typeIR, typeI)
	}

	o.Type = typeIR
	if err := o.validateType(formats); err != nil {
		return err
	}

	return nil
}

// validateType carries on validations for parameter Type
func (o *PostMeNotificationsParams) validateType(formats strfmt.Registry) error {

	// uniqueItems: true
	if err := validate.UniqueItems("type", "query", o.Type); err != nil {
		return err
	}

	return nil
}
