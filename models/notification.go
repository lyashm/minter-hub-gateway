// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Notification notification
// swagger:model Notification
type Notification struct {

	// data for create link
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"createdAt"`

	// meta
	// Required: true
	Meta interface{} `json:"meta"`

	// subject Id
	// Required: true
	SubjectID *uint64 `json:"subjectId"`

	// subject text
	// Required: true
	SubjectText *string `json:"subjectText"`

	// type activity
	// Required: true
	// Enum: [requests comments replies follows]
	TypeActivity *string `json:"typeActivity"`

	// user
	// Required: true
	User *Author `json:"user"`
}

// Validate validates this notification
func (m *Notification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubjectText(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeActivity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Notification) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Notification) validateMeta(formats strfmt.Registry) error {

	return nil
}

func (m *Notification) validateSubjectID(formats strfmt.Registry) error {

	if err := validate.Required("subjectId", "body", m.SubjectID); err != nil {
		return err
	}

	return nil
}

func (m *Notification) validateSubjectText(formats strfmt.Registry) error {

	if err := validate.Required("subjectText", "body", m.SubjectText); err != nil {
		return err
	}

	return nil
}

var notificationTypeTypeActivityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["requests","comments","replies","follows"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		notificationTypeTypeActivityPropEnum = append(notificationTypeTypeActivityPropEnum, v)
	}
}

const (

	// NotificationTypeActivityRequests captures enum value "requests"
	NotificationTypeActivityRequests string = "requests"

	// NotificationTypeActivityComments captures enum value "comments"
	NotificationTypeActivityComments string = "comments"

	// NotificationTypeActivityReplies captures enum value "replies"
	NotificationTypeActivityReplies string = "replies"

	// NotificationTypeActivityFollows captures enum value "follows"
	NotificationTypeActivityFollows string = "follows"
)

// prop value enum
func (m *Notification) validateTypeActivityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, notificationTypeTypeActivityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Notification) validateTypeActivity(formats strfmt.Registry) error {

	if err := validate.Required("typeActivity", "body", m.TypeActivity); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeActivityEnum("typeActivity", "body", *m.TypeActivity); err != nil {
		return err
	}

	return nil
}

func (m *Notification) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Notification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Notification) UnmarshalBinary(b []byte) error {
	var res Notification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
