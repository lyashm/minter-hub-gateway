// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Feed feed
// swagger:model Feed
type Feed struct {

	// description
	// Required: true
	Description *string `json:"description"`

	// followed
	// Required: true
	Followed *bool `json:"followed"`

	// followers count
	// Required: true
	FollowersCount *uint64 `json:"followersCount"`

	// id
	// Required: true
	ID *uint64 `json:"id"`

	// image
	// Required: true
	Image *string `json:"image"`

	// joined
	// Required: true
	Joined *bool `json:"joined"`

	// members
	// Required: true
	Members Authors `json:"members"`

	// name
	// Required: true
	Name *string `json:"name"`

	// owner
	// Required: true
	Owner *Author `json:"owner"`
}

// Validate validates this feed
func (m *Feed) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFollowed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFollowersCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJoined(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Feed) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *Feed) validateFollowed(formats strfmt.Registry) error {

	if err := validate.Required("followed", "body", m.Followed); err != nil {
		return err
	}

	return nil
}

func (m *Feed) validateFollowersCount(formats strfmt.Registry) error {

	if err := validate.Required("followersCount", "body", m.FollowersCount); err != nil {
		return err
	}

	return nil
}

func (m *Feed) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Feed) validateImage(formats strfmt.Registry) error {

	if err := validate.Required("image", "body", m.Image); err != nil {
		return err
	}

	return nil
}

func (m *Feed) validateJoined(formats strfmt.Registry) error {

	if err := validate.Required("joined", "body", m.Joined); err != nil {
		return err
	}

	return nil
}

func (m *Feed) validateMembers(formats strfmt.Registry) error {

	if err := validate.Required("members", "body", m.Members); err != nil {
		return err
	}

	if err := m.Members.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("members")
		}
		return err
	}

	return nil
}

func (m *Feed) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Feed) validateOwner(formats strfmt.Registry) error {

	if err := validate.Required("owner", "body", m.Owner); err != nil {
		return err
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Feed) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Feed) UnmarshalBinary(b []byte) error {
	var res Feed
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
