// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FeedShort feed short
// swagger:model FeedShort
type FeedShort struct {

	// id
	ID uint64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// slug
	Slug string `json:"slug,omitempty"`

	// type feed
	// Enum: [teams projects coins topics]
	TypeFeed string `json:"typeFeed,omitempty"`
}

// Validate validates this feed short
func (m *FeedShort) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTypeFeed(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var feedShortTypeTypeFeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["teams","projects","coins","topics"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		feedShortTypeTypeFeedPropEnum = append(feedShortTypeTypeFeedPropEnum, v)
	}
}

const (

	// FeedShortTypeFeedTeams captures enum value "teams"
	FeedShortTypeFeedTeams string = "teams"

	// FeedShortTypeFeedProjects captures enum value "projects"
	FeedShortTypeFeedProjects string = "projects"

	// FeedShortTypeFeedCoins captures enum value "coins"
	FeedShortTypeFeedCoins string = "coins"

	// FeedShortTypeFeedTopics captures enum value "topics"
	FeedShortTypeFeedTopics string = "topics"
)

// prop value enum
func (m *FeedShort) validateTypeFeedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, feedShortTypeTypeFeedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FeedShort) validateTypeFeed(formats strfmt.Registry) error {

	if swag.IsZero(m.TypeFeed) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeFeedEnum("typeFeed", "body", m.TypeFeed); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FeedShort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FeedShort) UnmarshalBinary(b []byte) error {
	var res FeedShort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
