// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProfileFull profile full
// swagger:model ProfileFull
type ProfileFull struct {

	// bio
	// Required: true
	Bio *string `json:"bio"`

	// favorited
	// Required: true
	Favorited *bool `json:"favorited"`

	// id
	// Required: true
	ID *uint64 `json:"id"`

	// image Url
	// Required: true
	ImageURL *string `json:"imageUrl"`

	// member
	// Required: true
	// Unique: true
	Member []string `json:"member"`

	// name
	// Required: true
	Name *string `json:"name"`

	// owner
	// Required: true
	// Unique: true
	Owner []string `json:"owner"`

	// stars
	// Required: true
	Stars *uint32 `json:"stars"`

	// username
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this profile full
func (m *ProfileFull) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBio(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFavorited(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMember(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStars(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProfileFull) validateBio(formats strfmt.Registry) error {

	if err := validate.Required("bio", "body", m.Bio); err != nil {
		return err
	}

	return nil
}

func (m *ProfileFull) validateFavorited(formats strfmt.Registry) error {

	if err := validate.Required("favorited", "body", m.Favorited); err != nil {
		return err
	}

	return nil
}

func (m *ProfileFull) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ProfileFull) validateImageURL(formats strfmt.Registry) error {

	if err := validate.Required("imageUrl", "body", m.ImageURL); err != nil {
		return err
	}

	return nil
}

func (m *ProfileFull) validateMember(formats strfmt.Registry) error {

	if err := validate.Required("member", "body", m.Member); err != nil {
		return err
	}

	if err := validate.UniqueItems("member", "body", m.Member); err != nil {
		return err
	}

	return nil
}

func (m *ProfileFull) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ProfileFull) validateOwner(formats strfmt.Registry) error {

	if err := validate.Required("owner", "body", m.Owner); err != nil {
		return err
	}

	if err := validate.UniqueItems("owner", "body", m.Owner); err != nil {
		return err
	}

	return nil
}

func (m *ProfileFull) validateStars(formats strfmt.Registry) error {

	if err := validate.Required("stars", "body", m.Stars); err != nil {
		return err
	}

	return nil
}

func (m *ProfileFull) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProfileFull) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProfileFull) UnmarshalBinary(b []byte) error {
	var res ProfileFull
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
